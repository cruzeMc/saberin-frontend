@page "/contacts"
@using ClassLibrary1.DTOs
@using ClassLibrary1.Services
@inject IContactService contactService
@inject NavigationManager NavigationManager
@inject ILogger<Contacts> Logger


<div class="container my-5">
    <div class="card shadow">
        <div class="card-header d-flex justify-content-between align-items-center bg-primary text-white">
            <h3 class="mb-0">Contact List</h3>
            <button class="btn btn-light" @onclick="CreateContact">
                <i class="bi bi-plus-lg"></i> Create Contact
            </button>
        </div>
        <div class="card-body">
            @if (contacts == null)
            {
                <div class="d-flex justify-content-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-striped align-middle">
                        <thead>
                        <tr>
                            <th>First Name</th>
                            <th>Last Name</th>
                            <th>City</th>
                            <th>State</th>
                            <th>Zip Code</th>
                            <th class="text-end">Actions</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var contact in contacts)
                        {
                            var primaryAddress = contact.Addresses.FirstOrDefault();
                            <tr>
                                <td>@contact.FirstName</td>
                                <td>@contact.LastName</td>
                                <td>@(primaryAddress?.City ?? "N/A")</td>
                                <td>@(primaryAddress?.State ?? "N/A")</td>
                                <td>@(primaryAddress?.ZipCode ?? "N/A")</td>
                                <td class="text-end">
                                    <button class="btn btn-sm btn-primary me-1"
                                            @onclick="() => ViewContact(contact.Id)">
                                        <i class="bi bi-eye"></i> View
                                    </button>
                                    <button class="btn btn-sm btn-warning me-1"
                                            @onclick="() => EditContact(contact.Id)">
                                        <i class="bi bi-pencil"></i> Edit
                                    </button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => PromptDelete(contact.Id)">
                                        <i class="bi bi-trash"></i> Delete
                                    </button>
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            }
        </div>
        <div class="card-footer d-flex justify-content-between align-items-center">
            <button class="btn btn-secondary" @onclick="PreviousPage" disabled="@(pageNumber == 1)">Previous</button>
            <span>Page @pageNumber</span>
            <button class="btn btn-secondary" @onclick="NextPage"
                    disabled="@(contacts != null && contacts.Count() < pageSize)">Next
            </button>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
@if (showDeleteModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);" role="dialog">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CancelDelete"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this contact?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                    <button class="btn btn-danger" @onclick="ConfirmDelete">Yes, Delete</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private IEnumerable<ContactDTO> contacts;
    private int pageNumber = 1;
    private int pageSize = 10;

    // Modal state
    private bool showDeleteModal = false;
    private int? contactToDeleteId;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Initializing contacts page.");
        NavigationManager.LocationChanged += OnLocationChanged;
        await LoadContacts();
    }

    private async Task LoadContacts()
    {
        contacts = await contactService.GetContactsAsync(pageNumber, pageSize);
        Logger.LogInformation("Loaded {Count} contacts.", contacts?.Count() ?? 0);
    }

    private async void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        if (new Uri(e.Location).AbsolutePath.Equals("/contacts", StringComparison.OrdinalIgnoreCase))
        {
            await LoadContacts();
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    private async Task PreviousPage()
    {
        if (pageNumber > 1)
        {
            pageNumber--;
            await LoadContacts();
        }
    }

    private async Task NextPage()
    {
        if (contacts != null && contacts.Count() == pageSize)
        {
            pageNumber++;
            await LoadContacts();
        }
    }

    private void ViewContact(int id)
    {
        NavigationManager.NavigateTo($"/viewcontact/{id}");
    }

    private void EditContact(int id)
    {
        NavigationManager.NavigateTo($"/editcontact/{id}");
    }

    private void CreateContact()
    {
        NavigationManager.NavigateTo("/createcontact");
    }

    // Trigger modal popup
    private void PromptDelete(int id)
    {
        contactToDeleteId = id;
        showDeleteModal = true;
    }

    private void CancelDelete()
    {
        showDeleteModal = false;
        contactToDeleteId = null;
    }

    // Delete the contact after confirmation
    private async Task ConfirmDelete()
    {
        if (contactToDeleteId.HasValue)
        {
            await contactService.DeleteContactAsync(contactToDeleteId.Value);
            await LoadContacts();
            showDeleteModal = false;
            contactToDeleteId = null;
        }
    }
}
