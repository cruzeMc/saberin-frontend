@page "/createcontact"
@using ClassLibrary1.DTOs
@using ClassLibrary1.Services
@inject IContactService contactService
@inject NavigationManager NavigationManager

<div class="container my-5">
    <div class="card shadow">
        <div class="card-header bg-success text-white">
            <h3 class="mb-0">Create New Contact</h3>
        </div>
        <div class="card-body">
            <EditForm Model="contact" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <!-- Basic Information -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label for="firstName" class="form-label">First Name</label>
                        <InputText id="firstName" class="form-control" @bind-Value="contact.FirstName" />
                        <ValidationMessage For="@(() => contact.FirstName)" />
                    </div>
                    <div class="col-md-6">
                        <label for="lastName" class="form-label">Last Name</label>
                        <InputText id="lastName" class="form-control" @bind-Value="contact.LastName" />
                        <ValidationMessage For="@(() => contact.LastName)" />
                    </div>
                </div>

                <!-- Address Details -->
                <h5 class="mt-4 mb-3">Address Details</h5>
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label for="street" class="form-label">Street</label>
                        <InputText id="street" class="form-control" @bind-Value="address.Street" />
                        <ValidationMessage For="@(() => address.Street)" />
                    </div>
                    <div class="col-md-6">
                        <label for="city" class="form-label">City</label>
                        <InputText id="city" class="form-control" @bind-Value="address.City" />
                        <ValidationMessage For="@(() => address.City)" />
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label for="state" class="form-label">State</label>
                        <InputText id="state" class="form-control" @bind-Value="address.State" />
                        <ValidationMessage For="@(() => address.State)" />
                    </div>
                    <div class="col-md-6">
                        <label for="zip" class="form-label">ZIP Code</label>
                        <InputText id="zip" class="form-control" @bind-Value="address.ZipCode" />
                        <ValidationMessage For="@(() => address.ZipCode)" />
                    </div>
                </div>

                <!-- Error Message -->
                <div class="text-danger" role="alert">@errorMessage</div>

                <!-- Action Buttons -->
                <div class="d-flex justify-content-end mt-4">
                    <button type="button" class="btn btn-secondary me-2" @onclick="BackToContacts">Cancel</button>
                    <button type="submit" class="btn btn-success">Create Contact</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private ContactDTO contact = new();
    private AddressDTO address = new();
    private string errorMessage = "";

    protected override void OnInitialized()
    {
        // Initialize the Addresses list
        contact.Addresses = new List<AddressDTO> { address };
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await contactService.CreateContactAsync(contact);
            if (response != null)
            {
                NavigationManager.NavigateTo("/contacts");
            }
            else
            {
                errorMessage = "Failed to create contact. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private void BackToContacts()
    {
        NavigationManager.NavigateTo("/contacts");
    }
}